''' 23.5. Локаторы CSS

Локаторы CSS довольно гибки, обладают хорошей точностью. Потому их часто применяют в автоматизации разных проектов.

Локаторы CSS легко извлечь из браузера: в DevTools, в нижней строке вкладки Elements браузер отображает всю необходимую
информацию для написания локатора CSS.

Так как мы работаем только с полем для ввода электронной почты, то в нижней строке нас будет интересовать элемент
input#email.form-control. Всё, что следует до него, — теги разделов DOM-дерева. При наведении курсора мыши на каждый
раздел будет подсвечиваться цветом соответствующий элемент веб-страницы.

                    Правила записи CSS-локаторов:
    тег - (пишется без знаков перед названием, например, form);
    #название_идентификатора - (например, id="email" превращается в #email);
    .название_класса - (например, class="form-control" превращается в .form-control).

CSS-локатор для поля ввода e-mail (рис. 23.5.1), который предлагает браузер, — “input#email.form-control”. Но так как ID
на странице уникален, локатор можно сократить, указав только “id: #email”.

Для проверки и поиска элементов по CSS-локатору в DevTools можно использовать следующие методы:

    $$("CSS-локатор") — ищет все элементы в DOM по данному CSS-селектору.
    или аналог: =document.querySelectorAll("CSS-локатор")

И ещё вариант для возвращения только первого найденного элемента: document.querySelector("CSS-локатор")

Обратите внимание! Вместо слов "CSS-локатор" должно быть вписано нужное нам значение.  В примере с полем ввода
электронной почты это "#email" или "input#email.form-control".

Составные CSS-локаторы
Основная ценность CSS-локаторов в том, что мы можем указывать несколько элементов DOM-дерева.

Предположим, что для теста нам надо добраться до тега <span>, внутри которого лежит текст “Application Integration”.
У самого тега нет ни id, ни class, ни имён, но для составления CSS-локатора всё это — не проблема, так как можно
использовать значения вышестоящих тегов DOM:

Обращаемся к тегу <a>, расположенному над нужным нам тегом <span> в DOM-дереве.
Если класс в <a> не уникален, поднимаемся ещё на один уровень вверх — к элементу <div>, у которого есть id со значением
“lb-item-expander-wrapper-01”.
Составляем локатор: #lb-item-expander-wrapper-01 (указываем значение <div>).
Обозначим в локаторе необходимость «спуститься» к элементу ниже. Для этого можно поставить пробел или использовать
символ «больше» — >.
Напишем в консоли локатор для тега <span>, внутри которого лежит текст “Application Integration”:
$$("#lb-item-expander-wrapper-01 a span").
Теперь выполняем проверку в консоли.

Ещё один вариант CSS-локатора для тега <span>, внутри которого лежит текст “Application Integration”, можно составить
с использованием символа “>”: $$("#lb-item-expander-wrapper-01>a>span").

ВНИМАНИЕ!

В CSS-локаторах пробел используется как переход вниз по DOM-дереву, а в атрибутах класса — как разделитель классов.

Например, в коде страницы вы видите элемент: <a class="lb-trigger lb-icon-ps-60-application" style="height: 99px;">.
В нём "lb-trigger lb-icon-ps-60-application" — не один класс, а два, разделённые пробелом. В локаторе их следует указать
без пробелов, но через точку (.) — $$(".lb-trigger.lb-icon-ps-60-application".
Если же указать $$(".lb-trigger lb-icon-ps-60-application"), то эта команда будет искать сначала элемент с классом
“lb-trigger”, а затем внутри него искать элемент с тегом “lb-icon-ps-60-application “. Такая конструкция либо выдаст
результат Null (не найдено ничего), либо выдаст локатор не того элемента, который мы хотели указать.

Использование не-CSS атрибутов
CSS-локаторы позволяют обращаться к любому атрибуту тега. К примеру, нам надо написать локатор для элемента:
<div name="lb-item" dev-id="01" style="display: none; height: 0px;">. У элемента нет ни ID, ни класса. Но мы можем
использовать обращение к любому другому атрибуту. Для этого используются квадратные скобки — [ ]. Внутри скобок помещают
искомый атрибут и его значение. Локатор по атрибуту dev-id: $$('div[dev-id="01"]').

ВНИМАНИЕ!

Следует брать в одинарные кавычки либо само значение $$('div[data-id="1"]'), либо заменять двойные кавычки внутри
значения на одинарные: $$("div[data-id='01']").

Пример написания сложного локатора
На сайте AWS нам надо протестировать только одну форму поиска — ту, что в верхнем меню. И, как мы помним по атрибуту
name, там находятся две формы. Можем ли мы использовать CSS-локатор для указания только одной из них? Да!

Результирующий локатор для поля поиска в верхнем меню — $$('div[data-directory-id="typeahead-suggestions"] span.twitter-typeahead input[name="searchQuery"]').

Подведём итоги
CSS-локаторы — мощный и довольно простой в использовании инструмент. Вы можете самостоятельно попробовать написать этот
тип локаторов к другим элементам в прототипе социальной сети PetFriends или на более сложном и насыщенном информацией
сайте — AWS.

Однако, у CSS-локаторов всё же есть ограничение: по DOM-дереву можно переходить только от родителя к потомку, нельзя
«подниматься вверх».

Зато XPath решает эту проблему и содержит ряд других возможностей, дальше мы их рассмотрим.

https://testerslittlehelper.wordpress.com/2017/04/09/use-css/ статья про CSS локаторы.





'''