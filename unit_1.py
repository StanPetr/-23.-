''' Модуль 23. Локаторы элементов и полезные плагины
Этот модуль закладывает основы автоматизации тестирования элементов веб-страницы, проверки их наличия и атрибутов.
Мы углубимся в структуру HTML-кода и научимся точно указывать любой элемент или тег на веб-странице при помощи локаторов.

Модуль 23.1.
Как вы уже знаете из предыдущих занятий, веб-страницы описываются с помощью языка разметки HTML и языка описания стилей
CSS. Используя HTML и CSS, автоматизированные тесты могут находить любой элемент на странице и взаимодействовать с ним
— вычислять его положение на странице, нажимать на него, перемещать и т.д.

Совсем скоро мы научимся делать всё это с помощью библиотеки Selenium, а в этом модуле мы подробнее разберём, как можно
составлять локаторы для веб-элементов (эти знания нам потребуются в будущих модулях, когда мы будем писать
автоматизированные тесты на Selenium).


Локаторы — способ указать на элемент.
В играх часто используется такой термин, как «локация» — место, в которое нужно добраться, чтобы выполнить в нём
определённые игровые действия. В реальной жизни мы тоже используем достопримечательности или большие вывески для того,
чтобы легче ориентироваться. Подобным образом на веб-странице мы можем использовать специальные локаторы для точного
указания на элемент, который расположен там.

Локатор — это способ идентифицировать элемент HTML на веб-странице. Практически все инструменты автоматизации
пользовательского интерфейса предоставляют возможность использовать локаторы для идентификации элементов HTML на
веб-странице.

Локатор позволяет тестировщикам выбирать элемент HTML DOM для выполнения действий. В этом модуле мы рассматриваем все
типы локаторов, которые используются в браузере и во фреймворке Selenium WebDriver (его вы начнёте осваивать в следующем
модуле).

Как осуществляется навигация по тегам
Мы помним, что веб-элементы заданы в структуре HTML-документа при помощи тегов. К тегам могут применяться классы стилей.

Рассмотрим пример страницы, это будет пример №1:

<html>
<head>
    <title>PetFriends</title>
</head>
<body>
    <div class="mainWrap">
        <h1>PetFriends</h1>
        <p>абзац текста</p>
        <ul>
            <li>пункт 1</li>
            <li>пункт 2</li>
        </ul>
    </div>
    <div class="sideBar">
            <h2>Второй заголовок</h2>
            <p>Текст 2</p>
    </div>
</body>
</html>

Первый обязательный тег —  <html>.
Далее внутри него идут два тега — <head> и <body>.
Внутри <body> будут теги, которые отобразятся в браузере, например,  <p>, <div>, <h2> и т.д.
Получается иерархическая вложенная структура. Этот же HTML-код можно представить в виде взаимосвязей:

img

Мы выстроили из HTML-кода чёткую иерархическую структуру в виде дерева (как вы могли заметить, схема похожа на очертания
перевернутого дерева). Как видно из рисунка, у дерева есть корневой элемент (root) — тег <html>, от которого отходят
ветви, заканчивающиеся узлами.

Узлы — это вложенные теги и атрибуты, тексты, составляющие содержимое корневого элемента. От каждого вложенного тега
могут отходить свои ветви.

Элементы, содержащие в себе другие элементы, являются предками по отношению к ним. А сами вложенные элементы являются
потомками.

Для наглядности рассмотрим одну ветку нашего дерева:

Каждый предок может иметь неограниченное число потомков. Каждый потомок будет иметь число предков, зависящее от структуры
дерева и своего места в цепочке вложенности. Но в любом случае как минимум один предок будет.

Сестринские элементы (siblings) — это группа из двух или более элементов, у которых общий родитель. Элементы не
обязательно должны быть одного типа, просто у них должен быть общий родитель.

Как указать путь к тегу <h1> в структуре DOM-дерева для Примера №1?
Как мы видим из рисунка, древовидная структура тегов похожа на структуру папок на жёстком диске. Путь к конкретному
тегу указывается аналогично пути к конкретному файлу в строке файлового менеджера.

№	Действие	                                                                                      Результат
1	Указываем корень	                                                                                  /
2	Прописываем первый тег, указываем ещё один слеш                                                     //html
3	Заходим внутрь элемента                                                                             /html/
4	Выбираем потомка — body (не head, так как тег, который нам нужен, находится внутри body).        /html/body
5	Спускаемся на уровень ниже	                                                                     /html/body/
6	Потомок, который нам надо выбрать, — первый div[1]	                                          /html/body/div[1]
7	Спускаемся на уровень ниже — ещё один слеш /	                                             /html/body/div[1]/
8	Из всех потомков выбираем тег заголовка — h1	                                             /html/body/div[1]/h1

В результате получаем отрезок пути к тегу (теговый локатор) <h1> в примере №1:
/html/body/div[1]/h1
Зачем тестировщику нужно знать локатор конкретного тега или элемента?
Как пользователи мы взаимодействуем с веб-страницами визуально и не думаем о том, с помощью каких тегов они созданы.
Мы смотрим, скроллим, кликаем, заполняем формы. Веб-интерфейс, который мы видим, отрисовывается браузером в результате
анализа тестового HTML-кода. Однако тестировщику нужен удобный и быстрый способ поиска элементов для проверки свойств
или воздействия на сами элементы. Это значит, что ему нужны объекты, которые находят веб-элементы на странице по
заданным критериям — локаторы веб-элементов.

Локаторы веб-элементов применяются:
1 В мануальном (ручном) тестировании для:
    точного указания на веб-элемент, в котором возникает баг;
    определения наличия или отсутствия элемента на странице (важно для больших, длинных страниц).
2 В автоматизированном тестировании:
    всегда, так как автоматизация тестов веб-страницы без указания локаторов невозможна. В автотестах нет человека,
    который нажмёт нужную кнопку или введёт данные в поле. Указывать программе на элемент веб-страницы можно только
    через тот или иной тип локатора.

Для составления локаторов мы можем использовать как сам тег, так и его атрибуты, а также его положение в структуре
документа. Основные типы локаторов:

Локаторы ID;
Локаторы Name;
Локаторы ClassName;
Локаторы CSS;
Локаторы XPath.
'''